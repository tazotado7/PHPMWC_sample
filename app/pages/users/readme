


1. მომხმარებლის ავტორიზაციის გვერდი. 
1.1 მომხმარებლის ავტორიზაციის გვერდია users/login.php
1.2 ჩასაწერი ველები.
1.2.1 login_username, ტექსტის ტიპის პარამეტრი, მომხმარებლის უნიკალური საავტორიზაციო პარამეტრი რომელსაც რეგისტრაციის დროს უთითებს.
1.2.1.1 შესღუდვები: არ უნდა იყოს 64 სიმბოლოზე მეტი, შევსება აუცილებელია.
1.2.2 login_Password, ტექსტის ტიპის პარამეტრი. მომხმარებლის პაროლი საავტორიზაციო პარამეტრი რომელსაც რეგისტრაციის დროს უთითებს.
1.2.2.1 შეზღუდვები: არ უნდა იყოს 256 სიმბოლოზე მეტი, შევსება აუცილებელია.
1.3 ავტორიზაციის გადამისამართება ხდება users/login.php გვერდზე.
1.4 გვერდის გამოძახება
1.4.1 თუ მომხმარებელი უკვე ავტორიზებულია უნდა გადამისამართდეს მომხმარებლის პირად პროფილზე 'users/profile.php'
1.4.2 თუ users/login.php გვერდი გამოძახებულია POST მეთოდით გამოიძახება users/func/auth.php ფაილი და დაიწყება ავტორიზაციის შემოწმების ლოგიკა.

2. მომხმარებლის ავტორიზაციის შემოწმების ლოგიკა.
2.1 მომხმარებლის ავტორიზაციის შემოწმების ფაილია users/func/auth.php 
2.2 ფაილი 2.1 ობიექტის (class login_auth) ტიპის არის და მისი გამოძახება ხდება 1.1 ფაილშივე, შემდეგში login_auth ობიექტი.
2.3 login_auth ობიექტის დაცული ცვლადებია:
2.3.1 გადასამისამართბელი loginpage ცვლადი 'users/login'. გამოიყენება მომხმარებლის ავტორიზაციის გვერდზე დასაბრუნებლად.
2.3.2 გადასამისამართბელი profilepage ცვლადი 'users/profile'. გამოიყენება მომხმარებლის წარმატებით ავტორიზაციის შემდეგ, პირად კაბინეტში გადასასვლელად.
2.3.3  username_maxlength ცვლადი '64'. 1.2.1 -ის შესაბამისად
2.3.4  password_maxlength ცვლადი '256'. 1.2.2 - ის შესაბამისად
2.3.5  max_attempts ცვლადი '3'. მომხმარებლის მაქსიმალური მცდელობების რაოდენობაა.
2.3.6  error_messages მასივის ტიპის ცვლადი წინასწარ განსაზღვული მომხმარებლისთვის გასაგები შეტყობინებებისთვის.
2.4 login_auth ობიექტის გაშვებისას გამოძახებული ფუნქციები
2.4.1 allready_authorized() ავტორიზაციის შემოწმება.
2.4.1.1 თუ მომხმარებელი უკვე ავტორიზებულია უნდა გადამისამართდეს განსაზღვრულ გვერდზე 2.3.2 ცვლადის მიხედვით, 1.4.1 ის შესაბამისობით.
2.4.2 check_method() მეთოდის შემოწმება.
2.4.2.1 login_auth ობიექტი ამოწმებს გამოძახებისას თუ არ იყო POST მეთოდი გამოყენებული, გადაამისამართებს წინა გვერდზე,
    ხოლო თუ ასეთი მონაცემი არ არსებობს 2.3.1 ცვლადის მიხედვით.
2.4.3 start() ავტორიზაციის ლოგიკა.
2.4.3.1 თუ login.php გვერდიდან, 1.2 პუნქტში განსაზღვრული ჩასაწერები ველების გადმოცემული პარამეტრები  ცარიელია 
    გადაამისამართებს 2.3.1 პარემტრის ცვლადში მითითებულ გვერდზე 2.3.6 მასივის 'empty' გასაღებით.
2.4.3.2 თუ გადმოცემული მომხმარებელის პარამეტრები  1.2.1 ის ან/და 1.2.2 ის მიხედვით ცარიელია  
    გადაამისამართებს 2.3.1 პარემტრის ცვლადში მითითებულ გვერდზე 2.3.6 მასივის 'notexists' გასაღებით.
2.4.3.3 მომხმარებლის მონაცემების წამოღება მონაცემთა ბაზიდან 1.2.1 პარამეტრის ცვლადის მიხედვით.
2.4.3.3.1 ამოწმებს პაროლი თუ ემთხვევა
2.4.3.3.2 თუ პაროლი არ დაემთხვა მცდელობების რაოდენობას ერთით ზრდის  
2.4.3.3.3 თუ პაროლი დაემთხვა მცდელობების რაოდენობა უტოლდება ნულს
2.4.3.4 თუ მომხმარებელი დაბლოკილია შეასრულებს 2.4.3.5) პუნქტს false სტატუსით 
    და  გადაამისამართებს 2.3.1 პარემტრის ცვლადში მითითებულ გვერდზე 2.3.6 მასივის 'blocked' გასაღებით. 
2.4.3.5 `users_auth` ცხრილში ინახავს მცდელობის დეტალებს: მოწყობილობა, IP მისამართი და მცდელობის სტატუსი.
2.4.3.6 `users` ცხრილში შეაქვს მომხმარებლის განახლებული პარამეტრებით ცვლილება: მცდელობების რაოდენობა და დაიბლოკა თუ არა მომხმარებელი.
2.4.3.7 თუ პაროლი არ დაემთხვა და მცდელობების შედეგად მიომხმარებელი დაიბლოკა 
    გადაამისამართებს 2.3.1 პარემტრის ცვლადში მითითებულ გვერდზე 2.3.6 მასივის 'blocked' გასაღებით. 
2.4.3.8 თუ პაროლი სწორია შეიტანს სესიაში ცვლილებებს და  გადაამისამართბს 2.3.2 პარემტრის ცვლადში მითითებულ გვერდზე.
2.4.3.9 თუ პაროლი არასწორია გადაამისამართებს 2.3.1 პარემტრის ცვლადში მითითებულ გვერდზე 2.3.6 მასივის 'incorect' გასაღებით. 